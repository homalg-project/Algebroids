# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Declarations
#

#! @Chapter Finite categories from nerve data

####################################
#
#! @Section GAP categories
#
####################################

#! @Description
#!  The &GAP; category of categories from nerve data.
DeclareCategory( "IsCategoryFromNerveData",
        IsCapCategory );

#! @Description
#!  The &GAP; category of cells in a category from nerve data.
DeclareCategory( "IsCellInCategoryFromNerveData",
        IsCapCategoryCell );

#! @Description
#!  The &GAP; category of objects in a category from nerve data.
DeclareCategory( "IsObjectInCategoryFromNerveData",
        IsCellInCategoryFromNerveData and IsCapCategoryObject );

#! @Description
#!  The &GAP; category of morphisms in a category from nerve data.
DeclareCategory( "IsMorphismInCategoryFromNerveData",
        IsCellInCategoryFromNerveData and IsCapCategoryMorphism );

####################################
#
#! @Section Attributes
#
####################################

#! @Description
#!  The nerve data used to create the category <A>C</A>.
#!  It might differ from the <Q>normalized</Q> output of
#!  <C>NerveTruncatedInDegree2Data</C>( <A>C</A> ).
#! @Arguments C
#! @Returns a pair consisting of a triple and an 8-tuple
DeclareAttribute( "NerveData",
        IsCategoryFromNerveData );

CapJitAddTypeSignature( "NerveData", [ IsCapCategory ],
  function ( input_types )
    local V;
    
    Assert( 0, IsFinite( input_types[1].category ) );
    
    V := RangeCategoryOfHomomorphismStructure( input_types[1].category );
    
    return rec( filter := IsNTuple,
                element_types :=
                [ rec( filter := IsNTuple,
                       element_types :=
                       [ CapJitDataTypeOfObjectOfCategory( V ),      # C0
                         CapJitDataTypeOfObjectOfCategory( V ),      # C1
                         CapJitDataTypeOfObjectOfCategory( V ) ] ),  # C2
                  rec( filter := IsNTuple,
                       element_types :=
                       [ CapJitDataTypeOfMorphismOfCategory( V ),    # id
                         CapJitDataTypeOfMorphismOfCategory( V ),    # s
                         CapJitDataTypeOfMorphismOfCategory( V ),    # t
                         CapJitDataTypeOfMorphismOfCategory( V ),    # is
                         CapJitDataTypeOfMorphismOfCategory( V ),    # it
                         CapJitDataTypeOfMorphismOfCategory( V ),    # ps
                         CapJitDataTypeOfMorphismOfCategory( V ),    # pt
                         CapJitDataTypeOfMorphismOfCategory( V ) ] ) # mu
                  ] );
    
end );

#! @Description
#!  The finite set of objects of the category <A>C</A> created from nerve data.
#! @Arguments C
#! @Returns a list
DeclareAttribute( "SetOfObjects",
        IsCategoryFromNerveData );

#CapJitAddTypeSignature( "SetOfObjects", [ IsCategoryFromNerveData ],
#  function ( input_types )
#    
#    return rec( filter := IsList,
#                element_type := CapJitDataTypeOfObjectOfCategory( input_types[1].category ) );
#    
#end );

#! @Description
#!  The finite set of morphisms of the category <A>C</A> created from nerve data.
#! @Arguments C
#! @Returns a list
DeclareAttribute( "SetOfMorphisms",
        IsCategoryFromNerveData );

DeclareAttribute( "IndicesOfGeneratingMorphisms",
        IsCategoryFromNerveData );

#CapJitAddTypeSignature( "IndicesOfGeneratingMorphisms", [ IsCategoryFromNerveData ],
#  function ( input_types )
#    
#    return rec( filter := IsList,
#                element_type := rec( filter := IsInt ) );
#    
#end );

DeclareAttribute( "RelationsAmongGeneratingMorphisms",
        IsCategoryFromNerveData );

#CapJitAddTypeSignature( "RelationsAmongGeneratingMorphisms", [ IsCategoryFromNerveData ],
#  function ( input_types )
#    
#    return rec( filter := IsList,
#                element_type :=
#                rec( filter := IsNTuple,
#                     element_types :=
#                     [ rec( filter := IsList,
#                            element_type := rec( filter := IsInt ) ),
#                       rec( filter := IsList,
#                            element_type := rec( filter := IsInt ) ) ] ) );
#    
#end );

#! @Description
#!  The finite set of morphisms generating the category <A>C</A> created from nerve data.
#! @Arguments C
#! @Returns a list
DeclareAttribute( "SetOfGeneratingMorphisms",
        IsCategoryFromNerveData );

#CapJitAddTypeSignature( "SetOfGeneratingMorphisms", [ IsCategoryFromNerveData ],
#  function ( input_types )
#    
#    return rec( filter := IsList,
#                element_type := CapJitDataTypeOfMorphismOfCategory( input_types[1].category ) );
#    
#end );

#! @Description
#!  The number of morphisms in the category <A>C</A> created from nerve data.
#! @Arguments C
#! @Returns a nonnegative integer
DeclareAttribute( "Size",
        IsCategoryFromNerveData );

##
DeclareAttribute( "MapOfObject",
        IsObjectInCategoryFromNerveData );

CapJitAddTypeSignature( "MapOfObject", [ IsObjectInCategoryFromNerveData ],
  function ( input_types )
    local V;
    
    Assert( 0, IsCategoryFromNerveData( input_types[1].category ) );
    
    V := RangeCategoryOfHomomorphismStructure( input_types[1].category );
    
    return CapJitDataTypeOfMorphismOfCategory( V );
    
end );

##
DeclareAttribute( "MapOfMorphism",
        IsMorphismInCategoryFromNerveData );

CapJitAddTypeSignature( "MapOfMorphism", [ IsMorphismInCategoryFromNerveData ],
  function ( input_types )
    local V;
    
    Assert( 0, IsCategoryFromNerveData( input_types[1].category ) );
    
    V := RangeCategoryOfHomomorphismStructure( input_types[1].category );
    
    return CapJitDataTypeOfMorphismOfCategory( V );
    
end );

##
DeclareAttribute( "OppositeNerveData",
        IsList );

#! @Description
#!  The opposite category of the category <A>C</A> defined by nerve data.
#! @Arguments C
#! @Returns a &CAP; category
DeclareAttribute( "OppositeCategoryFromNerveData",
        IsCategoryFromNerveData );

####################################
#
#! @Section Constructors
#
####################################

#! @Description
#!  Construct an enriched finite category out of the <A>input_record</A>
#!  consisting of values to the keys:
#!  * name
#!  * range_of_HomStructure
#!  * data_tables
#!  * indices_of_generating_morphisms
#!  * relations
#!  * labels
#!  * properties
#! @Arguments input_record
#! @Returns a &CAP; category
DeclareAttribute( "CategoryFromNerveData",
        IsRecord );
#! @InsertChunk CategoryFromNerveData

#! @Arguments C
DeclareAttribute( "CategoryFromNerveData",
        IsFpCategory );

if false then
#! @Arguments C
DeclareAttribute( "CategoryFromNerveData",
        IsCategoryFromDataTables );
fi;

#! @Description
#!  Construct the <A>o</A>-th object in the category <A>C</A> created from nerve data.
#! @Arguments C, o
#! @Returns a &CAP; category
DeclareOperation( "CreateObject",
        [ IsCategoryFromNerveData, IsInt ] );

#! @Description
#!  Construct the <A>m</A>-th morphism <A>source</A>$\to$<A>range</A>
#!  in the category <A>C</A> created from nerve data.
#! @Arguments C, m
#! @Returns a &CAP; category
#! @Group CreateMorphism
DeclareOperation( "CreateMorphism",
        [ IsCategoryFromNerveData, IsInt ] );

#! @Arguments source, m, range
#! @Group CreateMorphism
DeclareOperation( "CreateMorphism",
        [ IsObjectInCategoryFromNerveData, IsInt, IsObjectInCategoryFromNerveData ] );
