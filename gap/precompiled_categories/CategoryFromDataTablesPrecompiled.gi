# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Implementations
#
BindGlobal( "ADD_FUNCTIONS_FOR_CategoryFromDataTablesPrecompiled", function ( cat )
    
    ##
    AddDistinguishedObjectOfHomomorphismStructure( cat,
        
########
function ( cat_1 )
    return CreateCapCategoryObjectWithAttributes( RangeCategoryOfHomomorphismStructure( cat_1 ), Length, BigInt( 1 ) );
end
########
        
    , 100 );
    
    ##
    AddHomomorphismStructureOnMorphismsWithGivenObjects( cat,
        
########
function ( cat_1, source_1, alpha_1, beta_1, range_1 )
    return CreateCapCategoryMorphismWithAttributes( RangeCategoryOfHomomorphismStructure( cat_1 ), source_1, range_1, AsList, DataTables( cat_1 )[2][6][1 + AsList( MapOfMorphism( alpha_1 ) )[1]][1 + AsList( MapOfMorphism( beta_1 ) )[1]] );
end
########
        
    , 100 );
    
    ##
    AddHomomorphismStructureOnObjects( cat,
        
########
function ( cat_1, arg2_1, arg3_1 )
    return CreateCapCategoryObjectWithAttributes( RangeCategoryOfHomomorphismStructure( cat_1 ), Length, DataTables( cat_1 )[2][5][1 + AsList( MapOfObject( arg2_1 ) )[1]][1 + AsList( MapOfObject( arg3_1 ) )[1]] );
end
########
        
    , 100 );
    
    ##
    AddIdentityMorphism( cat,
        
########
function ( cat_1, a_1 )
    local deduped_1_1, deduped_2_1, deduped_3_1, deduped_4_1, deduped_5_1, deduped_6_1, deduped_7_1, deduped_8_1;
    deduped_8_1 := DataTables( cat_1 );
    deduped_7_1 := RangeCategoryOfHomomorphismStructure( cat_1 );
    deduped_6_1 := deduped_8_1[2];
    deduped_5_1 := deduped_8_1[1];
    deduped_4_1 := CreateCapCategoryObjectWithAttributes( deduped_7_1, Length, BigInt( 1 ) );
    deduped_3_1 := CreateCapCategoryObjectWithAttributes( deduped_7_1, Length, deduped_5_1[1] );
    deduped_2_1 := CAP_JIT_INCOMPLETE_LOGIC( deduped_6_1[1][1 + AsList( MapOfObject( a_1 ) )[1]] );
    deduped_1_1 := 1 + deduped_2_1;
    return CreateCapCategoryMorphismWithAttributes( cat_1, CreateCapCategoryObjectWithAttributes( cat_1, MapOfObject, CreateCapCategoryMorphismWithAttributes( deduped_7_1, deduped_4_1, deduped_3_1, AsList, [ deduped_6_1[2][deduped_1_1] ] ) ), CreateCapCategoryObjectWithAttributes( cat_1, MapOfObject, CreateCapCategoryMorphismWithAttributes( deduped_7_1, deduped_4_1, deduped_3_1, AsList, [ deduped_6_1[3][deduped_1_1] ] ) ), MapOfMorphism, CreateCapCategoryMorphismWithAttributes( deduped_7_1, deduped_4_1, CreateCapCategoryObjectWithAttributes( deduped_7_1, Length, deduped_5_1[2] ), AsList, [ deduped_2_1 ] ) );
end
########
        
    , 100 );
    
    ##
    AddInterpretMorphismAsMorphismFromDistinguishedObjectToHomomorphismStructureWithGivenObjects( cat,
        
########
function ( cat_1, source_1, alpha_1, range_1 )
    return CreateCapCategoryMorphismWithAttributes( RangeCategoryOfHomomorphismStructure( cat_1 ), source_1, range_1, AsList, DataTables( cat_1 )[2][7][1 + AsList( MapOfMorphism( alpha_1 ) )[1]] );
end
########
        
    , 100 );
    
    ##
    AddInterpretMorphismFromDistinguishedObjectToHomomorphismStructureAsMorphism( cat,
        
########
function ( cat_1, source_1, range_1, alpha_1 )
    local deduped_3_1, deduped_4_1, deduped_5_1, deduped_6_1, deduped_7_1, deduped_8_1, deduped_9_1, deduped_10_1;
    deduped_10_1 := DataTables( cat_1 );
    deduped_9_1 := RangeCategoryOfHomomorphismStructure( cat_1 );
    deduped_8_1 := deduped_10_1[2];
    deduped_7_1 := deduped_10_1[1];
    deduped_6_1 := CreateCapCategoryObjectWithAttributes( deduped_9_1, Length, BigInt( 1 ) );
    deduped_5_1 := CreateCapCategoryObjectWithAttributes( deduped_9_1, Length, deduped_7_1[1] );
    deduped_4_1 := CAP_JIT_INCOMPLETE_LOGIC( deduped_8_1[8][1 + AsList( MapOfObject( source_1 ) )[1]][1 + AsList( MapOfObject( range_1 ) )[1]][1 + AsList( alpha_1 )[1]] );
    deduped_3_1 := 1 + deduped_4_1;
    return CreateCapCategoryMorphismWithAttributes( cat_1, CreateCapCategoryObjectWithAttributes( cat_1, MapOfObject, CreateCapCategoryMorphismWithAttributes( deduped_9_1, deduped_6_1, deduped_5_1, AsList, [ deduped_8_1[2][deduped_3_1] ] ) ), CreateCapCategoryObjectWithAttributes( cat_1, MapOfObject, CreateCapCategoryMorphismWithAttributes( deduped_9_1, deduped_6_1, deduped_5_1, AsList, [ deduped_8_1[3][deduped_3_1] ] ) ), MapOfMorphism, CreateCapCategoryMorphismWithAttributes( deduped_9_1, deduped_6_1, CreateCapCategoryObjectWithAttributes( deduped_9_1, Length, deduped_7_1[2] ), AsList, [ deduped_4_1 ] ) );
end
########
        
    , 100 );
    
    ##
    AddIsCongruentForMorphisms( cat,
        
########
function ( cat_1, arg2_1, arg3_1 )
    return AsList( MapOfMorphism( arg2_1 ) ) = AsList( MapOfMorphism( arg3_1 ) );
end
########
        
    , 100 );
    
    ##
    AddIsEqualForMorphisms( cat,
        
########
function ( cat_1, arg2_1, arg3_1 )
    return AsList( MapOfMorphism( arg2_1 ) ) = AsList( MapOfMorphism( arg3_1 ) );
end
########
        
    , 100 );
    
    ##
    AddIsEqualForObjects( cat,
        
########
function ( cat_1, arg2_1, arg3_1 )
    return AsList( MapOfObject( arg2_1 ) ) = AsList( MapOfObject( arg3_1 ) );
end
########
        
    , 100 );
    
    ##
    AddIsWellDefinedForMorphisms( cat,
        
########
function ( cat_1, arg2_1 )
    local deduped_2_1, deduped_3_1, deduped_4_1, deduped_5_1;
    deduped_5_1 := MapOfMorphism( arg2_1 );
    deduped_4_1 := AsList( deduped_5_1 );
    deduped_3_1 := Length( Range( deduped_5_1 ) );
    deduped_2_1 := Length( Source( deduped_5_1 ) );
    return IdFunc( function (  )
                  if not ForAll( deduped_4_1, function ( a_3 )
                               return (IsBigInt( a_3 ) and a_3 >= 0);
                           end ) then
                      return false;
                  elif deduped_2_1 <> Length( deduped_4_1 ) then
                      return false;
                  elif not ForAll( deduped_4_1, function ( a_3 )
                               return a_3 < deduped_3_1;
                           end ) then
                      return false;
                  else
                      return true;
                  fi;
                  return;
              end )(  ) and deduped_2_1 = 1 and DataTables( cat_1 )[1][2] = deduped_3_1;
end
########
        
    , 100 );
    
    ##
    AddIsWellDefinedForObjects( cat,
        
########
function ( cat_1, arg2_1 )
    local deduped_2_1, deduped_3_1, deduped_4_1, deduped_5_1;
    deduped_5_1 := MapOfObject( arg2_1 );
    deduped_4_1 := AsList( deduped_5_1 );
    deduped_3_1 := Length( Range( deduped_5_1 ) );
    deduped_2_1 := Length( Source( deduped_5_1 ) );
    return IdFunc( function (  )
                  if not ForAll( deduped_4_1, function ( a_3 )
                               return (IsBigInt( a_3 ) and a_3 >= 0);
                           end ) then
                      return false;
                  elif deduped_2_1 <> Length( deduped_4_1 ) then
                      return false;
                  elif not ForAll( deduped_4_1, function ( a_3 )
                               return a_3 < deduped_3_1;
                           end ) then
                      return false;
                  else
                      return true;
                  fi;
                  return;
              end )(  ) and deduped_2_1 = 1 and DataTables( cat_1 )[1][1] = deduped_3_1;
end
########
        
    , 100 );
    
    ##
    AddMorphismConstructor( cat,
        
########
function ( cat_1, arg2_1, arg3_1, arg4_1 )
    return CreateCapCategoryMorphismWithAttributes( cat_1, arg2_1, arg4_1, MapOfMorphism, arg3_1 );
end
########
        
    , 100 );
    
    ##
    AddMorphismDatum( cat,
        
########
function ( cat_1, arg2_1 )
    return MapOfMorphism( arg2_1 );
end
########
        
    , 100 );
    
    ##
    AddObjectConstructor( cat,
        
########
function ( cat_1, arg2_1 )
    return CreateCapCategoryObjectWithAttributes( cat_1, MapOfObject, arg2_1 );
end
########
        
    , 100 );
    
    ##
    AddObjectDatum( cat,
        
########
function ( cat_1, arg2_1 )
    return MapOfObject( arg2_1 );
end
########
        
    , 100 );
    
    ##
    AddPreCompose( cat,
        
########
function ( cat_1, alpha_1, beta_1 )
    local deduped_3_1, deduped_4_1, deduped_5_1, deduped_6_1, deduped_7_1, deduped_8_1, deduped_9_1, deduped_10_1;
    deduped_10_1 := DataTables( cat_1 );
    deduped_9_1 := RangeCategoryOfHomomorphismStructure( cat_1 );
    deduped_8_1 := deduped_10_1[2];
    deduped_7_1 := deduped_10_1[1];
    deduped_6_1 := CreateCapCategoryObjectWithAttributes( deduped_9_1, Length, BigInt( 1 ) );
    deduped_5_1 := CreateCapCategoryObjectWithAttributes( deduped_9_1, Length, deduped_7_1[1] );
    deduped_4_1 := CAP_JIT_INCOMPLETE_LOGIC( deduped_8_1[4][1 + AsList( MapOfMorphism( alpha_1 ) )[1]][1 + AsList( MapOfMorphism( beta_1 ) )[1]] );
    deduped_3_1 := 1 + deduped_4_1;
    return CreateCapCategoryMorphismWithAttributes( cat_1, CreateCapCategoryObjectWithAttributes( cat_1, MapOfObject, CreateCapCategoryMorphismWithAttributes( deduped_9_1, deduped_6_1, deduped_5_1, AsList, [ deduped_8_1[2][deduped_3_1] ] ) ), CreateCapCategoryObjectWithAttributes( cat_1, MapOfObject, CreateCapCategoryMorphismWithAttributes( deduped_9_1, deduped_6_1, deduped_5_1, AsList, [ deduped_8_1[3][deduped_3_1] ] ) ), MapOfMorphism, CreateCapCategoryMorphismWithAttributes( deduped_9_1, deduped_6_1, CreateCapCategoryObjectWithAttributes( deduped_9_1, Length, deduped_7_1[2] ), AsList, [ deduped_4_1 ] ) );
end
########
        
    , 100 );
    
    if IsBound( cat!.precompiled_functions_added ) then
        
        # COVERAGE_IGNORE_NEXT_LINE
        Error( "precompiled functions have already been added before" );
        
    fi;
    
    cat!.precompiled_functions_added := true;
    
end );

BindGlobal( "CategoryFromDataTablesPrecompiled", function ( quiver )
  local category_constructor, cat;
    
    category_constructor :=
        
        
        function ( quiver )
    local sFinSets;
    sFinSets := CategoryOfSkeletalFinSets(  : FinalizeCategory := true );
    return CategoryFromDataTables( FreeCategory( quiver : range_of_HomStructure := sFinSets,
          FinalizeCategory := true ) );
end;
        
        
    
    cat := category_constructor( quiver : FinalizeCategory := false, no_precompiled_code := true );
    
    ADD_FUNCTIONS_FOR_CategoryFromDataTablesPrecompiled( cat );
    
    Finalize( cat );
    
    return cat;
    
end );
