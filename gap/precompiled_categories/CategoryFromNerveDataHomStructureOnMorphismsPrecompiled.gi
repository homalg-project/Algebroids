# SPDX-License-Identifier: GPL-2.0-or-later
# Algebroids: Algebroids and bialgebroids as preadditive categories generated by enhanced quivers
#
# Implementations
#
BindGlobal( "ADD_FUNCTIONS_FOR_CategoryFromNerveDataHomStructureOnMorphismsPrecompiled", function ( cat )
    
    ##
    AddHomomorphismStructureOnMorphismsWithGivenObjects( cat,
        
########
function ( cat_1, source_1, alpha_1, beta_1, range_1 )
    local hoisted_3_1, hoisted_4_1, hoisted_5_1, hoisted_6_1, hoisted_7_1, hoisted_8_1, hoisted_9_1, hoisted_10_1, hoisted_11_1, hoisted_12_1, hoisted_13_1, hoisted_14_1, hoisted_15_1, hoisted_16_1, hoisted_17_1, hoisted_18_1, hoisted_19_1, hoisted_20_1, hoisted_21_1, hoisted_22_1, hoisted_23_1, hoisted_24_1, hoisted_25_1, hoisted_26_1, hoisted_27_1, hoisted_28_1, hoisted_29_1, hoisted_30_1, hoisted_31_1, hoisted_32_1, hoisted_33_1, hoisted_34_1, hoisted_35_1, hoisted_36_1, hoisted_37_1, hoisted_38_1, hoisted_39_1, hoisted_40_1, hoisted_41_1, hoisted_42_1, deduped_43_1, deduped_44_1, deduped_45_1, deduped_46_1, deduped_47_1, deduped_48_1, deduped_49_1, deduped_50_1, deduped_51_1, deduped_52_1, deduped_53_1, deduped_54_1, deduped_55_1, deduped_56_1, deduped_57_1, deduped_58_1, deduped_59_1, deduped_60_1, deduped_61_1, deduped_62_1, deduped_63_1, deduped_64_1, deduped_65_1, deduped_66_1, deduped_67_1, deduped_68_1, deduped_69_1, deduped_70_1, deduped_71_1, deduped_72_1, deduped_73_1, deduped_74_1, deduped_75_1, deduped_76_1, deduped_77_1;
    deduped_77_1 := MapOfMorphism( beta_1 );
    deduped_76_1 := MapOfMorphism( alpha_1 );
    deduped_75_1 := NerveData( cat_1 );
    deduped_74_1 := RangeCategoryOfHomomorphismStructure( cat_1 );
    deduped_73_1 := MapOfObject( Range( beta_1 ) );
    deduped_72_1 := MapOfObject( Source( alpha_1 ) );
    deduped_71_1 := deduped_75_1[2];
    deduped_70_1 := deduped_71_1[3];
    deduped_69_1 := deduped_71_1[2];
    deduped_68_1 := Length( Source( deduped_77_1 ) );
    deduped_67_1 := Length( Source( deduped_76_1 ) );
    deduped_66_1 := deduped_71_1[6];
    deduped_65_1 := deduped_71_1[7];
    deduped_64_1 := Length( Source( deduped_73_1 ) );
    deduped_63_1 := Length( Source( deduped_72_1 ) );
    deduped_62_1 := Length( Source( deduped_70_1 ) );
    deduped_61_1 := Length( Source( deduped_69_1 ) );
    deduped_60_1 := Length( Source( deduped_66_1 ) );
    deduped_59_1 := Length( Source( deduped_65_1 ) );
    hoisted_26_1 := AsList( deduped_70_1 );
    hoisted_25_1 := deduped_62_1;
    hoisted_22_1 := AsList( deduped_69_1 );
    hoisted_21_1 := deduped_61_1;
    deduped_58_1 := Filtered( [ 0 .. deduped_62_1 * deduped_61_1 - 1 ], function ( x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( x_2 );
            return hoisted_26_1[1 + REM_INT( deduped_1_2, hoisted_25_1 )] = hoisted_22_1[1 + REM_INT( QUO_INT( deduped_1_2, hoisted_25_1 ), hoisted_21_1 )];
        end );
    hoisted_28_1 := AsList( deduped_73_1 );
    hoisted_27_1 := deduped_64_1;
    deduped_57_1 := Filtered( [ 0 .. deduped_62_1 * deduped_64_1 - 1 ], function ( x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( x_2 );
            return hoisted_26_1[1 + REM_INT( deduped_1_2, hoisted_25_1 )] = hoisted_28_1[1 + REM_INT( QUO_INT( deduped_1_2, hoisted_25_1 ), hoisted_27_1 )];
        end );
    hoisted_24_1 := AsList( deduped_72_1 );
    hoisted_23_1 := deduped_63_1;
    deduped_56_1 := Filtered( [ 0 .. deduped_61_1 * deduped_63_1 - 1 ], function ( x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( x_2 );
            return hoisted_22_1[1 + REM_INT( deduped_1_2, hoisted_21_1 )] = hoisted_24_1[1 + REM_INT( QUO_INT( deduped_1_2, hoisted_21_1 ), hoisted_23_1 )];
        end );
    hoisted_6_1 := AsList( deduped_66_1 );
    hoisted_5_1 := deduped_60_1;
    hoisted_4_1 := AsList( deduped_65_1 );
    hoisted_3_1 := deduped_59_1;
    deduped_55_1 := Filtered( [ 0 .. deduped_59_1 * deduped_60_1 - 1 ], function ( x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( x_2 );
            return hoisted_4_1[1 + REM_INT( deduped_1_2, hoisted_3_1 )] = hoisted_6_1[1 + REM_INT( QUO_INT( deduped_1_2, hoisted_3_1 ), hoisted_5_1 )];
        end );
    deduped_54_1 := Length( deduped_57_1 );
    deduped_53_1 := Length( deduped_56_1 );
    deduped_52_1 := Length( deduped_55_1 );
    deduped_51_1 := [ 0 .. deduped_52_1 - 1 ];
    hoisted_32_1 := deduped_57_1;
    hoisted_34_1 := List( [ 0 .. deduped_54_1 - 1 ], function ( i_2 )
            return REM_INT( CAP_JIT_INCOMPLETE_LOGIC( hoisted_32_1[1 + i_2] ), hoisted_25_1 );
        end );
    hoisted_33_1 := deduped_54_1;
    hoisted_29_1 := deduped_56_1;
    hoisted_31_1 := List( [ 0 .. deduped_53_1 - 1 ], function ( i_2 )
            return REM_INT( CAP_JIT_INCOMPLETE_LOGIC( hoisted_29_1[1 + i_2] ), hoisted_21_1 );
        end );
    hoisted_30_1 := deduped_53_1;
    deduped_50_1 := Filtered( [ 0 .. deduped_53_1 * deduped_54_1 - 1 ], function ( x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( x_2 );
            return hoisted_31_1[1 + REM_INT( deduped_1_2, hoisted_30_1 )] = hoisted_34_1[1 + REM_INT( QUO_INT( deduped_1_2, hoisted_30_1 ), hoisted_33_1 )];
        end );
    hoisted_14_1 := AsList( deduped_77_1 );
    hoisted_13_1 := deduped_68_1;
    hoisted_7_1 := deduped_55_1;
    hoisted_12_1 := List( deduped_51_1, function ( logic_new_func_x_2 )
            return hoisted_4_1[1 + REM_INT( QUO_INT( CAP_JIT_INCOMPLETE_LOGIC( hoisted_7_1[(1 + logic_new_func_x_2)] ), hoisted_3_1 ), hoisted_5_1 )];
        end );
    hoisted_8_1 := deduped_52_1;
    deduped_49_1 := Filtered( [ 0 .. deduped_52_1 * deduped_68_1 - 1 ], function ( x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( x_2 );
            return hoisted_12_1[1 + REM_INT( deduped_1_2, hoisted_8_1 )] = hoisted_14_1[1 + REM_INT( QUO_INT( deduped_1_2, hoisted_8_1 ), hoisted_13_1 )];
        end );
    hoisted_11_1 := AsList( deduped_76_1 );
    hoisted_10_1 := deduped_67_1;
    hoisted_9_1 := List( deduped_51_1, function ( logic_new_func_x_2 )
            return hoisted_6_1[1 + REM_INT( CAP_JIT_INCOMPLETE_LOGIC( hoisted_7_1[(1 + logic_new_func_x_2)] ), hoisted_3_1 )];
        end );
    deduped_48_1 := Filtered( [ 0 .. deduped_52_1 * deduped_67_1 - 1 ], function ( x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( x_2 );
            return hoisted_9_1[1 + REM_INT( deduped_1_2, hoisted_8_1 )] = hoisted_11_1[1 + REM_INT( QUO_INT( deduped_1_2, hoisted_8_1 ), hoisted_10_1 )];
        end );
    deduped_47_1 := Length( deduped_50_1 );
    deduped_46_1 := Length( deduped_49_1 );
    deduped_45_1 := Length( deduped_48_1 );
    hoisted_18_1 := deduped_49_1;
    hoisted_20_1 := List( [ 0 .. deduped_46_1 - 1 ], function ( i_2 )
            return REM_INT( CAP_JIT_INCOMPLETE_LOGIC( hoisted_18_1[1 + i_2] ), hoisted_8_1 );
        end );
    hoisted_19_1 := deduped_46_1;
    hoisted_15_1 := deduped_48_1;
    hoisted_17_1 := List( [ 0 .. deduped_45_1 - 1 ], function ( i_2 )
            return REM_INT( CAP_JIT_INCOMPLETE_LOGIC( hoisted_15_1[1 + i_2] ), hoisted_8_1 );
        end );
    hoisted_16_1 := deduped_45_1;
    deduped_44_1 := Filtered( [ 0 .. deduped_45_1 * deduped_46_1 - 1 ], function ( x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( x_2 );
            return hoisted_17_1[1 + REM_INT( deduped_1_2, hoisted_16_1 )] = hoisted_20_1[1 + REM_INT( QUO_INT( deduped_1_2, hoisted_16_1 ), hoisted_19_1 )];
        end );
    deduped_43_1 := Length( deduped_44_1 );
    hoisted_35_1 := deduped_50_1;
    hoisted_42_1 := List( [ 0 .. deduped_47_1 - 1 ], function ( logic_new_func_x_2 )
            return hoisted_31_1[1 + REM_INT( CAP_JIT_INCOMPLETE_LOGIC( hoisted_35_1[(1 + logic_new_func_x_2)] ), hoisted_30_1 )];
        end );
    hoisted_36_1 := deduped_58_1;
    hoisted_37_1 := List( [ 0 .. Length( deduped_75_1[1][3] ) - 1 ], function ( logic_new_func_x_2 )
            local deduped_1_2;
            deduped_1_2 := 1 + CAP_JIT_INCOMPLETE_LOGIC( logic_new_func_x_2 );
            return -1 + SafePosition( hoisted_36_1, (hoisted_6_1[deduped_1_2] + hoisted_4_1[deduped_1_2] * hoisted_25_1) );
        end );
    hoisted_39_1 := List( [ 0 .. Length( deduped_58_1 ) - 1 ], function ( x_2 )
            return -1 + SafePosition( hoisted_37_1, x_2 );
        end );
    hoisted_38_1 := AsList( deduped_71_1[8] );
    hoisted_41_1 := List( deduped_51_1, function ( logic_new_func_x_2 )
            local deduped_1_2;
            deduped_1_2 := CAP_JIT_INCOMPLETE_LOGIC( hoisted_7_1[1 + CAP_JIT_INCOMPLETE_LOGIC( logic_new_func_x_2 )] );
            return hoisted_38_1[1 + hoisted_39_1[(1 + (-1 + SafePosition( hoisted_36_1, (hoisted_38_1[1 + REM_INT( deduped_1_2, hoisted_3_1 )] + hoisted_4_1[(1 + REM_INT( QUO_INT( deduped_1_2, hoisted_3_1 ), hoisted_5_1 ))] * hoisted_25_1) )))]];
        end );
    hoisted_40_1 := deduped_44_1;
    return CreateCapCategoryMorphismWithAttributes( deduped_74_1, CreateCapCategoryObjectWithAttributes( deduped_74_1, Length, deduped_43_1 ), CreateCapCategoryObjectWithAttributes( deduped_74_1, Length, deduped_47_1 ), AsList, List( [ 0 .. deduped_43_1 - 1 ], function ( x_2 )
              return -1 + SafePosition( hoisted_42_1, hoisted_41_1[(1 + hoisted_17_1[(1 + REM_INT( CAP_JIT_INCOMPLETE_LOGIC( hoisted_40_1[(1 + CAP_JIT_INCOMPLETE_LOGIC( x_2 ))] ), hoisted_16_1 ))])] );
          end ) );
end
########
        
    , 100 );
    
    if IsBound( cat!.precompiled_functions_added ) then
        
        # COVERAGE_IGNORE_NEXT_LINE
        #Error( "precompiled functions have already been added before" );
        
    fi;
    
    cat!.precompiled_functions_added := true;
    
end );

BindGlobal( "CategoryFromNerveDataHomStructureOnMorphismsPrecompiled", function ( quiver )
  local category_constructor, cat;
    
    category_constructor :=
        
        
        function ( quiver )
    local sFinSets;
    sFinSets := SkeletalCategoryOfFiniteSets(  : FinalizeCategory := true );
    return CategoryFromNerveData( FreeCategory( quiver : range_of_HomStructure := sFinSets,
          FinalizeCategory := true ) );
end;
        
        
    
    cat := category_constructor( quiver : FinalizeCategory := false, no_precompiled_code := true );
    
    ADD_FUNCTIONS_FOR_CategoryFromNerveDataHomStructureOnMorphismsPrecompiled( cat );
    
    Finalize( cat );
    
    return cat;
    
end );
